let
  // AnoMinDinamico = Date.Year(List.Min(fSLA[DataEntrada])),
  // AnoMaxDinamico = Date.Year(List.Max(fSLA[DataEntrada])),
  DataInicio = #date(2015, 1, 1),
  DataFim = #date(2023, 12, 31),
  // DataInicio = #date(AnoMin, 1, 1),
  // DataFim = #date(AnoMax, 12, 31),
  DataAtual = DateTime.Date(DateTime.FixedLocalNow()),
  QtdDias = Duration.Days(Duration.From(DataFim - DataInicio))+1,
  Fonte = List.Dates(DataInicio, QtdDias, #duration(1, 0, 0, 0)),
  CriaTabela = Table.FromList(Fonte, Splitter.SplitByNothing()),
  TipoAlterado1 = Table.TransformColumnTypes(CriaTabela, {{"Column1", type date}}),
  RenomeiaColuna = Table.RenameColumns(TipoAlterado1, {{"Column1", "Data"}}),
  InsereAno = Table.AddColumn(RenomeiaColuna, "Ano", each Date.Year([Data]), type number),
  InsereMesNo = Table.AddColumn(InsereAno, "MesNo", each Date.Month([Data]), type number),
  InsereDia = Table.AddColumn(InsereMesNo, "Dia", each Date.Day([Data]), type number),
  InsereAnoMesDia = Table.AddColumn(InsereDia, "AnoMesDia", each [Ano] * 10000 + [MesNo] * 100 + [Dia], type number),
  InsereMes = Table.AddColumn(InsereAnoMesDia, "Mês", each Date.ToText([Data], "MMMM"), type text),
  InsereMesAno = Table.AddColumn(InsereMes, "Mês/Ano", each (try(Text.Range([Mês],0,3)) otherwise [Mês]) & "/" & Text.End(Number.ToText([Ano]), 2), type text),
  // InsereTrimestreAno = Table.AddColumn(InsereMesAno, "Trimestre/Ano", each "T" & Number.ToText([Trimestre]) & "/" & Number.ToText([Ano]), type text),
  InsereDiaSemana = Table.AddColumn(InsereMesAno, "Dia da Semana", each Date.DayOfWeek([Data]), Int64.Type),
  InsereNomeDia = Table.AddColumn(InsereDiaSemana, "Nome do Dia", each Date.ToText([Data], "dddd"), type text),
  InsereSemanaDoAno= Table.AddColumn(InsereNomeDia, "Semana do Ano", each Date.WeekOfYear([Data]), type number),
  InsereSemanaDoMes = Table.AddColumn(InsereSemanaDoAno,"Semana do Mês", each Date.WeekOfMonth([Data]), type number),
  // InsereSemanaAno = Table.AddColumn(InsereSemanaDoAno, "Semana/Ano", each "S" & Text.From([Semana do Ano]) & "/" & Text.From([Ano]), type text ),
  // InsereAnoSemana = Table.AddColumn(InsereSemanaAno, "AnoSemana", each [Ano] * 100 + [Semana do Ano], type number),
  // InsereAnoMes = Table.AddColumn(InsereAnoSemana , "AnoMes", each [Ano] * 100 + [MesNo], type number),
  // InsereAnoTrimestre = Table.AddColumn(InsereAnoMes, "AnoTrimestre", each [Ano] * 100 + [Trimestre], type number),
  // InsereAnoFiscal = Table.AddColumn(InsereAnoTrimestre, "Ano Fiscal", each (if MesInicioAnoFiscal = 1 then Text.From([Ano]) & "/" & Text.From([Ano] + 1) else if [MesNo]>=MesInicioAnoFiscal then Text.From([Ano]) & "/" & Text.From([Ano] + 1) else Text.From([Ano] - 1) & "/" & Text.From([Ano])), type text),
  // InsereTrimestreFiscal = Table.AddColumn(InsereAnoFiscal, "Trimestre Fiscal", each "FT" & Text.From( Number.RoundUp( Date.Month( Date.AddMonths( [Data], - (MesInicioAnoFiscal - 1) )) / 3 )), type text),
  // InsereMesFiscal = Table.AddColumn(InsereTrimestreFiscal, "Mês Fiscal", each if [MesNo]>=MesInicioAnoFiscal then [MesNo]-(MesInicioAnoFiscal-1) else [MesNo]+(12-MesInicioAnoFiscal+1), type text),
  InsereFlagFuturo = Table.AddColumn(InsereSemanaDoMes, "Futuro", each not ([Data] <= Date.From(DataAtual)), type logical),
  #"Primeiros Caracteres Inseridos" = Table.AddColumn(InsereFlagFuturo, "Nome do Dia Abrev", each Text.Start([Nome do Dia], 3), type text),
  #"Colunas Renomeadas" = Table.RenameColumns(#"Primeiros Caracteres Inseridos", {{"Data", "idData"}}),
  #"Tipo Alterado" = Table.TransformColumnTypes(#"Colunas Renomeadas", {{"idData", type date}, {"Ano", Int64.Type}, {"MesNo", Int64.Type}, {"Dia", Int64.Type}, {"AnoMesDia", Int64.Type}}),
in
  #"Tipo Alterado"